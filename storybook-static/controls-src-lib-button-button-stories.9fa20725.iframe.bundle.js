(self.webpackChunkcontrols_library_angular=self.webpackChunkcontrols_library_angular||[]).push([[248],{"./projects/controls/src/lib/button/button.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,'.ctrl-button {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  font-family: "Roboto", sans-serif;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  text-decoration: none;\n  outline: none;\n}\n.ctrl-button:hover {\n  opacity: 0.9;\n}\n.ctrl-button:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n.ctrl-button--primary {\n  background-color: #2196f3;\n  color: white;\n}\n.ctrl-button--secondary {\n  background-color: #f5f5f5;\n  color: #333;\n  border: 1px solid #ddd;\n}\n.ctrl-button--danger {\n  background-color: #f44336;\n  color: white;\n}\n.ctrl-button--sm {\n  padding: 4px 8px;\n  font-size: 12px;\n}\n.ctrl-button--lg {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n.ctrl-button--block {\n  width: 100%;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/controls/src/lib/button/button.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Playground:()=>Playground,Sizes:()=>Sizes,States:()=>States,Variants:()=>Variants,WithIcons:()=>WithIcons,__namedExportsOrder:()=>__namedExportsOrder,default:()=>button_stories});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var button_componentngResource=__webpack_require__("./projects/controls/src/lib/button/button.component.scss?ngResource"),button_componentngResource_default=__webpack_require__.n(button_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs");let ButtonComponent=class ButtonComponent{variant="primary";size="md";disabled=!1;loading=!1;type="button";fullWidth=!1;clicked=new core.EventEmitter;onChange=value=>{};onTouched=()=>{};onClick(event){this.disabled||this.loading||(this.clicked.emit(event),this.onChange(event),this.onTouched())}writeValue(value){}registerOnChange(fn){this.onChange=fn}registerOnTouched(fn){this.onTouched=fn}setDisabledState(isDisabled){this.disabled=isDisabled}get buttonClasses(){const classes=["ctrl-button",`ctrl-button--${this.variant}`,`ctrl-button--${this.size}`];return this.disabled&&classes.push("ctrl-button--disabled"),this.loading&&classes.push("ctrl-button--loading"),this.fullWidth&&classes.push("ctrl-button--full-width"),classes.join(" ")}static propDecorators={variant:[{type:core.Input}],size:[{type:core.Input}],disabled:[{type:core.Input}],loading:[{type:core.Input}],type:[{type:core.Input}],fullWidth:[{type:core.Input}],clicked:[{type:core.Output}]}};ButtonComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ctrl-button",template:'<button\n  [type]="type"\n  [disabled]="disabled || loading"\n  [class]="buttonClasses"\n  (click)="onClick($event)"\n>\n  <span class="ctrl-button__content" *ngIf="!loading">\n    <ng-content></ng-content>\n  </span>\n  \n  <span class="ctrl-button__loading" *ngIf="loading">\n    <svg class="ctrl-button__spinner" viewBox="0 0 24 24">\n      <circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-dasharray="31.416" stroke-dashoffset="31.416">\n        <animate attributeName="stroke-dasharray" dur="2s" values="0 31.416;15.708 15.708;0 31.416" repeatCount="indefinite"/>\n        <animate attributeName="stroke-dashoffset" dur="2s" values="0;-15.708;-31.416" repeatCount="indefinite"/>\n      </circle>\n    </svg>\n    Loading...\n  </span>\n</button>\n',providers:[{provide:fesm2022_forms.kq,useExisting:(0,core.forwardRef)((()=>ButtonComponent)),multi:!0}],styles:[button_componentngResource_default()]})],ButtonComponent);var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs");const button_stories={title:"Components/Button",component:ButtonComponent,parameters:{docs:{description:{component:"Button is used to initiate actions on a page or form. Use buttons to allow users to take actions, make choices, with a single tap."}}},argTypes:{variant:{control:{type:"select"},options:["primary","secondary","outline","text"],description:"Visual style variant of the button"},size:{control:{type:"select"},options:["sm","md","lg"],description:"Size of the button"},disabled:{control:{type:"boolean"},description:"Whether the button is disabled"},loading:{control:{type:"boolean"},description:"Whether the button is in loading state"},fullWidth:{control:{type:"boolean"},description:"Whether the button should take full width"},type:{control:{type:"select"},options:["button","submit","reset"],description:"HTML button type"}},decorators:[(0,dist.moduleMetadata)({imports:[fesm2022_forms.YN]})],tags:["autodocs"]},Default={args:{variant:"primary",size:"md",disabled:!1,loading:!1,fullWidth:!1},render:args=>({props:args,template:'<ctrl-button [variant]="variant" [size]="size" [disabled]="disabled" [loading]="loading" [fullWidth]="fullWidth" (clicked)="onClick($event)">Click me</ctrl-button>'})},Variants={render:()=>({template:'\n      <div style="display: flex; gap: 16px; flex-wrap: wrap;">\n        <ctrl-button variant="primary">Primary</ctrl-button>\n        <ctrl-button variant="secondary">Secondary</ctrl-button>\n        <ctrl-button variant="outline">Outline</ctrl-button>\n        <ctrl-button variant="text">Text</ctrl-button>\n      </div>\n    '})},Sizes={render:()=>({template:'\n      <div style="display: flex; gap: 16px; align-items: center;">\n        <ctrl-button size="sm">Small</ctrl-button>\n        <ctrl-button size="md">Medium</ctrl-button>\n        <ctrl-button size="lg">Large</ctrl-button>\n      </div>\n    '})},States={render:()=>({template:'\n      <div style="display: flex; gap: 16px; flex-wrap: wrap;">\n        <ctrl-button>Default</ctrl-button>\n        <ctrl-button [disabled]="true">Disabled</ctrl-button>\n        <ctrl-button [loading]="true">Loading</ctrl-button>\n        <ctrl-button [fullWidth]="true">Full Width</ctrl-button>\n      </div>\n    '})},WithIcons={render:()=>({template:'\n      <div style="display: flex; gap: 16px; flex-wrap: wrap;">\n        <ctrl-button>\n          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>\n          </svg>\n          Star\n        </ctrl-button>\n        <ctrl-button variant="outline">\n          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>\n            <polyline points="7,10 12,15 17,10"/>\n            <line x1="12" y1="15" x2="12" y2="3"/>\n          </svg>\n          Download\n        </ctrl-button>\n      </div>\n    '})},Playground={args:{variant:"primary",size:"md",disabled:!1,loading:!1,fullWidth:!1,type:"button"},render:args=>({props:{...args,onClick:event=>{console.log("Button clicked!",event),alert("Button clicked!")}},template:'\n      <div style="padding: 20px;">\n        <ctrl-button \n          [variant]="variant" \n          [size]="size" \n          [disabled]="disabled" \n          [loading]="loading" \n          [fullWidth]="fullWidth"\n          [type]="type"\n          (clicked)="onClick($event)">\n          {{ loading ? \'Loading...\' : \'Click me\' }}\n        </ctrl-button>\n      </div>\n    '})},__namedExportsOrder=["Default","Variants","Sizes","States","WithIcons","Playground"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'primary\',\n    size: \'md\',\n    disabled: false,\n    loading: false,\n    fullWidth: false\n  },\n  render: args => ({\n    props: args,\n    template: \'<ctrl-button [variant]="variant" [size]="size" [disabled]="disabled" [loading]="loading" [fullWidth]="fullWidth" (clicked)="onClick($event)">Click me</ctrl-button>\'\n  })\n}',...Default.parameters?.docs?.source}}},Variants.parameters={...Variants.parameters,docs:{...Variants.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n      <div style="display: flex; gap: 16px; flex-wrap: wrap;">\n        <ctrl-button variant="primary">Primary</ctrl-button>\n        <ctrl-button variant="secondary">Secondary</ctrl-button>\n        <ctrl-button variant="outline">Outline</ctrl-button>\n        <ctrl-button variant="text">Text</ctrl-button>\n      </div>\n    `\n  })\n}',...Variants.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n      <div style="display: flex; gap: 16px; align-items: center;">\n        <ctrl-button size="sm">Small</ctrl-button>\n        <ctrl-button size="md">Medium</ctrl-button>\n        <ctrl-button size="lg">Large</ctrl-button>\n      </div>\n    `\n  })\n}',...Sizes.parameters?.docs?.source}}},States.parameters={...States.parameters,docs:{...States.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n      <div style="display: flex; gap: 16px; flex-wrap: wrap;">\n        <ctrl-button>Default</ctrl-button>\n        <ctrl-button [disabled]="true">Disabled</ctrl-button>\n        <ctrl-button [loading]="true">Loading</ctrl-button>\n        <ctrl-button [fullWidth]="true">Full Width</ctrl-button>\n      </div>\n    `\n  })\n}',...States.parameters?.docs?.source}}},WithIcons.parameters={...WithIcons.parameters,docs:{...WithIcons.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    template: `\n      <div style="display: flex; gap: 16px; flex-wrap: wrap;">\n        <ctrl-button>\n          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>\n          </svg>\n          Star\n        </ctrl-button>\n        <ctrl-button variant="outline">\n          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>\n            <polyline points="7,10 12,15 17,10"/>\n            <line x1="12" y1="15" x2="12" y2="3"/>\n          </svg>\n          Download\n        </ctrl-button>\n      </div>\n    `\n  })\n}',...WithIcons.parameters?.docs?.source}}},Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:'{\n  args: {\n    variant: \'primary\',\n    size: \'md\',\n    disabled: false,\n    loading: false,\n    fullWidth: false,\n    type: \'button\'\n  },\n  render: args => ({\n    props: {\n      ...args,\n      onClick: (event: Event) => {\n        console.log(\'Button clicked!\', event);\n        alert(\'Button clicked!\');\n      }\n    },\n    template: `\n      <div style="padding: 20px;">\n        <ctrl-button \n          [variant]="variant" \n          [size]="size" \n          [disabled]="disabled" \n          [loading]="loading" \n          [fullWidth]="fullWidth"\n          [type]="type"\n          (clicked)="onClick($event)">\n          {{ loading ? \'Loading...\' : \'Click me\' }}\n        </ctrl-button>\n      </div>\n    `\n  })\n}',...Playground.parameters?.docs?.source}}}}}]);